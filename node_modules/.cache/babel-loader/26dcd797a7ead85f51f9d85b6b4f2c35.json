{"ast":null,"code":"var _jsxFileName = \"/home/howl/\\xC1rea de Trabalho/my-projects/games/src/pages/MemoryGame/MemoryGame.page.jsx\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { Container, Content, Score, Image } from \"./MemoryGame.style\";\nimport fries from \"../../assets/images/fries.png\";\nimport cheeseburger from \"../../assets/images/cheeseburger.png\";\nimport icecream from \"../../assets/images/ice-cream.png\";\nimport pizza from \"../../assets/images/pizza.png\";\nimport milkshake from \"../../assets/images/milkshake.png\";\nimport hotdog from \"../../assets/images/hotdog.png\";\nimport blank from \"../../assets/images/blank.png\";\nimport white from \"../../assets/images/white.png\";\n\nconst MemoryGame = () => {\n  const cardArray = [{\n    name: \"fries\",\n    img: fries\n  }, {\n    name: \"cheeseburger\",\n    img: cheeseburger\n  }, {\n    name: \"ice-cream\",\n    img: icecream\n  }, {\n    name: \"pizza\",\n    img: pizza\n  }, {\n    name: \"milkshake\",\n    img: milkshake\n  }, {\n    name: \"hotdog\",\n    img: hotdog\n  }, {\n    name: \"fries\",\n    img: fries\n  }, {\n    name: \"cheeseburger\",\n    img: cheeseburger\n  }, {\n    name: \"ice-cream\",\n    img: icecream\n  }, {\n    name: \"pizza\",\n    img: pizza\n  }, {\n    name: \"milkshake\",\n    img: milkshake\n  }, {\n    name: \"hotdog\",\n    img: hotdog\n  }];\n  const [cardsChosen, setCardsChosen] = useState([]);\n  const [cardsChosenId, setCardsChosenId] = useState([]);\n  const [cardsWonId, setCardsWonId] = useState([]);\n  const [message, setMessage] = useState(\"\"); //   const checkForMatch = useCallback(() => {\n  //     const [a, b] = cardsChosen;\n  //     if (a == b) {\n  //       console.log(\"you found a match\");\n  //     }\n  //   }, [cardsChosen]);\n\n  useEffect(() => {\n    const checkForMatch = () => {\n      const [cardA, cardB] = cardsChosen;\n      const [idA, idB] = cardsChosenId;\n\n      if (idA === idB) {\n        console.log(\"You have clicked the same image!\");\n      } else if (cardA.name === cardB.name) {\n        console.log(\"You found a match\");\n        setCardsWonId(oldCardsWonId => [...oldCardsWonId, ...cardsChosenId]);\n      } else {\n        console.log(\"Sorry, try again\");\n      }\n\n      setCardsChosen([]);\n      setCardsChosenId([]);\n    };\n\n    if (cardsChosen.length === 2) {\n      setTimeout(checkForMatch, 500);\n    }\n\n    return () => {};\n  }, [cardsChosen, cardsChosenId]);\n\n  const renderBoard = () => {\n    return cardArray.map((data, index) => {\n      return /*#__PURE__*/React.createElement(Image, {\n        key: index,\n        src: cardsChosenId.includes(index) ? data.img : cardsWonId.includes(index) ? white : blank,\n        onClick: cardsWonId.includes(index) ? null : () => flipCard(index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }\n      });\n    });\n  };\n\n  const flipCard = index => {\n    setCardsChosenId(oldChosenId => [...oldChosenId, index]);\n    setCardsChosen(oldCardsChosen => [...oldCardsChosen, cardArray[index]]);\n  };\n\n  const renderScore = () => {\n    return cardsWonId.length === cardArray.length ? /*#__PURE__*/React.createElement(Score, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 7\n      }\n    }, \"Congratulations! You found them all!\") : /*#__PURE__*/React.createElement(Score, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 7\n      }\n    }, \"Score: \", /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 16\n      }\n    }, cardsWonId.length / 2));\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 5\n    }\n  }, renderScore(), /*#__PURE__*/React.createElement(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }, renderBoard()));\n};\n\nexport default MemoryGame;","map":{"version":3,"sources":["/home/howl/Área de Trabalho/my-projects/games/src/pages/MemoryGame/MemoryGame.page.jsx"],"names":["React","useState","useEffect","useCallback","Container","Content","Score","Image","fries","cheeseburger","icecream","pizza","milkshake","hotdog","blank","white","MemoryGame","cardArray","name","img","cardsChosen","setCardsChosen","cardsChosenId","setCardsChosenId","cardsWonId","setCardsWonId","message","setMessage","checkForMatch","cardA","cardB","idA","idB","console","log","oldCardsWonId","length","setTimeout","renderBoard","map","data","index","includes","flipCard","oldChosenId","oldCardsChosen","renderScore"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\n\nimport { Container, Content, Score, Image } from \"./MemoryGame.style\";\n\nimport fries from \"../../assets/images/fries.png\";\nimport cheeseburger from \"../../assets/images/cheeseburger.png\";\nimport icecream from \"../../assets/images/ice-cream.png\";\nimport pizza from \"../../assets/images/pizza.png\";\nimport milkshake from \"../../assets/images/milkshake.png\";\nimport hotdog from \"../../assets/images/hotdog.png\";\nimport blank from \"../../assets/images/blank.png\";\nimport white from \"../../assets/images/white.png\";\n\nconst MemoryGame = () => {\n  const cardArray = [\n    {\n      name: \"fries\",\n      img: fries,\n    },\n    {\n      name: \"cheeseburger\",\n      img: cheeseburger,\n    },\n    {\n      name: \"ice-cream\",\n      img: icecream,\n    },\n    {\n      name: \"pizza\",\n      img: pizza,\n    },\n    {\n      name: \"milkshake\",\n      img: milkshake,\n    },\n    {\n      name: \"hotdog\",\n      img: hotdog,\n    },\n    {\n      name: \"fries\",\n      img: fries,\n    },\n    {\n      name: \"cheeseburger\",\n      img: cheeseburger,\n    },\n    {\n      name: \"ice-cream\",\n      img: icecream,\n    },\n    {\n      name: \"pizza\",\n      img: pizza,\n    },\n    {\n      name: \"milkshake\",\n      img: milkshake,\n    },\n    {\n      name: \"hotdog\",\n      img: hotdog,\n    },\n  ];\n\n  const [cardsChosen, setCardsChosen] = useState([]);\n  const [cardsChosenId, setCardsChosenId] = useState([]);\n  const [cardsWonId, setCardsWonId] = useState([]);\n  const [message, setMessage] = useState(\"\");\n\n  //   const checkForMatch = useCallback(() => {\n  //     const [a, b] = cardsChosen;\n\n  //     if (a == b) {\n  //       console.log(\"you found a match\");\n  //     }\n  //   }, [cardsChosen]);\n\n  useEffect(() => {\n    const checkForMatch = () => {\n      const [cardA, cardB] = cardsChosen;\n      const [idA, idB] = cardsChosenId;\n\n      if (idA === idB) {\n        console.log(\"You have clicked the same image!\");\n      } else if (cardA.name === cardB.name) {\n        console.log(\"You found a match\");\n        setCardsWonId((oldCardsWonId) => [...oldCardsWonId, ...cardsChosenId]);\n      } else {\n        console.log(\"Sorry, try again\");\n      }\n      setCardsChosen([]);\n      setCardsChosenId([]);\n    };\n\n    if (cardsChosen.length === 2) {\n      setTimeout(checkForMatch, 500);\n    }\n\n    return () => {};\n  }, [cardsChosen, cardsChosenId]);\n\n  const renderBoard = () => {\n    return cardArray.map((data, index) => {\n      return (\n        <Image\n          key={index}\n          src={\n            cardsChosenId.includes(index)\n              ? data.img\n              : cardsWonId.includes(index)\n              ? white\n              : blank\n          }\n          onClick={cardsWonId.includes(index) ? null : () => flipCard(index)}\n        />\n      );\n    });\n  };\n\n  const flipCard = (index) => {\n    setCardsChosenId((oldChosenId) => [...oldChosenId, index]);\n    setCardsChosen((oldCardsChosen) => [...oldCardsChosen, cardArray[index]]);\n  };\n\n  const renderScore = () => {\n    return cardsWonId.length === cardArray.length ? (\n      <Score>Congratulations! You found them all!</Score>\n    ) : (\n      <Score>\n        Score: <span>{cardsWonId.length / 2}</span>\n      </Score>\n    );\n  };\n\n  return (\n    <Container>\n      {renderScore()}\n      <Content>{renderBoard()}</Content>\n    </Container>\n  );\n};\n\nexport default MemoryGame;\n"]},"metadata":{},"sourceType":"module"}