{"ast":null,"code":"var _jsxFileName = \"/home/howl/\\xC1rea de Trabalho/my-projects/games/src/pages/MemoryGame/MemoryGame.page.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { Container, Content, Score, Image, Title } from \"./MemoryGame.style\";\nimport blank from \"../../assets/images/blank.png\";\nimport white from \"../../assets/images/white.png\";\nimport { cardArray } from \"../../helpers/MemoryGame/Utils\";\n\nconst MemoryGame = () => {\n  const [cardsChosen, setCardsChosen] = useState([]);\n  const [cardsChosenId, setCardsChosenId] = useState([]);\n  const [cardsWonId, setCardsWonId] = useState([]);\n  const [attempts, setAttempts] = useState(0);\n  useEffect(() => {\n    const checkForMatch = () => {\n      const [cardA, cardB] = cardsChosen;\n      const [idA, idB] = cardsChosenId;\n\n      if (idA === idB) {\n        console.log(\"You have clicked the same image!\");\n        setAttempts(oldAttempts => oldAttempts + 1);\n      } else if (cardA.name === cardB.name) {\n        console.log(\"You found a match\");\n        setCardsWonId(oldCardsWonId => [...oldCardsWonId, ...cardsChosenId]);\n      } else {\n        console.log(\"Sorry, try again\");\n        setAttempts(oldAttempts => oldAttempts + 1);\n      }\n\n      setCardsChosen([]);\n      setCardsChosenId([]);\n    };\n\n    if (cardsChosen.length === 2) {\n      setTimeout(checkForMatch, 500);\n    }\n\n    return () => {};\n  }, [cardsChosen, cardsChosenId]);\n\n  const renderBoard = () => {\n    return cardArray.map((data, index) => {\n      return /*#__PURE__*/React.createElement(Image, {\n        key: index,\n        src: cardsChosenId.includes(index) ? data.img : cardsWonId.includes(index) ? white : blank,\n        onClick: cardsWonId.includes(index) ? null : () => flipCard(index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 9\n        }\n      });\n    });\n  };\n\n  const flipCard = index => {\n    setCardsChosenId(oldChosenId => [...oldChosenId, index]);\n    setCardsChosen(oldCardsChosen => [...oldCardsChosen, cardArray[index]]);\n  };\n\n  const renderScore = () => {\n    return cardsWonId.length === cardArray.length ? /*#__PURE__*/React.createElement(Score, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }\n    }, \"Congratulations! You found them all!\") : /*#__PURE__*/React.createElement(Score, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }\n    }, \"Score: \", /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 16\n      }\n    }, cardsWonId.length / 2));\n  };\n\n  const renderAttempts = () => {\n    return /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }, \"Attempts: \", attempts));\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, renderScore(), renderAttempts(), /*#__PURE__*/React.createElement(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, renderBoard()));\n};\n\nexport default MemoryGame;","map":{"version":3,"sources":["/home/howl/Área de Trabalho/my-projects/games/src/pages/MemoryGame/MemoryGame.page.jsx"],"names":["React","useState","useEffect","Container","Content","Score","Image","Title","blank","white","cardArray","MemoryGame","cardsChosen","setCardsChosen","cardsChosenId","setCardsChosenId","cardsWonId","setCardsWonId","attempts","setAttempts","checkForMatch","cardA","cardB","idA","idB","console","log","oldAttempts","name","oldCardsWonId","length","setTimeout","renderBoard","map","data","index","includes","img","flipCard","oldChosenId","oldCardsChosen","renderScore","renderAttempts"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,OAApB,EAA6BC,KAA7B,EAAoCC,KAApC,EAA2CC,KAA3C,QAAwD,oBAAxD;AAEA,OAAOC,KAAP,MAAkB,+BAAlB;AACA,OAAOC,KAAP,MAAkB,+BAAlB;AACA,SAASC,SAAT,QAA0B,gCAA1B;;AAEA,MAAMC,UAAU,GAAG,MAAM;AACvB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACa,aAAD,EAAgBC,gBAAhB,IAAoCd,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACe,UAAD,EAAaC,aAAb,IAA8BhB,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACiB,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAC,CAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMkB,aAAa,GAAG,MAAM;AAC1B,YAAM,CAACC,KAAD,EAAQC,KAAR,IAAiBV,WAAvB;AACA,YAAM,CAACW,GAAD,EAAMC,GAAN,IAAaV,aAAnB;;AAEA,UAAIS,GAAG,KAAKC,GAAZ,EAAiB;AACfC,QAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACAP,QAAAA,WAAW,CAAEQ,WAAD,IAAiBA,WAAW,GAAG,CAAhC,CAAX;AACD,OAHD,MAGO,IAAIN,KAAK,CAACO,IAAN,KAAeN,KAAK,CAACM,IAAzB,EAA+B;AACpCH,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAT,QAAAA,aAAa,CAAEY,aAAD,IAAmB,CAAC,GAAGA,aAAJ,EAAmB,GAAGf,aAAtB,CAApB,CAAb;AACD,OAHM,MAGA;AACLW,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAP,QAAAA,WAAW,CAAEQ,WAAD,IAAiBA,WAAW,GAAG,CAAhC,CAAX;AACD;;AACDd,MAAAA,cAAc,CAAC,EAAD,CAAd;AACAE,MAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACD,KAhBD;;AAkBA,QAAIH,WAAW,CAACkB,MAAZ,KAAuB,CAA3B,EAA8B;AAC5BC,MAAAA,UAAU,CAACX,aAAD,EAAgB,GAAhB,CAAV;AACD;;AAED,WAAO,MAAM,CAAE,CAAf;AACD,GAxBQ,EAwBN,CAACR,WAAD,EAAcE,aAAd,CAxBM,CAAT;;AA0BA,QAAMkB,WAAW,GAAG,MAAM;AACxB,WAAOtB,SAAS,CAACuB,GAAV,CAAc,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACpC,0BACE,oBAAC,KAAD;AACE,QAAA,GAAG,EAAEA,KADP;AAEE,QAAA,GAAG,EACDrB,aAAa,CAACsB,QAAd,CAAuBD,KAAvB,IACID,IAAI,CAACG,GADT,GAEIrB,UAAU,CAACoB,QAAX,CAAoBD,KAApB,IACA1B,KADA,GAEAD,KAPR;AASE,QAAA,OAAO,EAAEQ,UAAU,CAACoB,QAAX,CAAoBD,KAApB,IAA6B,IAA7B,GAAoC,MAAMG,QAAQ,CAACH,KAAD,CAT7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAaD,KAdM,CAAP;AAeD,GAhBD;;AAkBA,QAAMG,QAAQ,GAAIH,KAAD,IAAW;AAC1BpB,IAAAA,gBAAgB,CAAEwB,WAAD,IAAiB,CAAC,GAAGA,WAAJ,EAAiBJ,KAAjB,CAAlB,CAAhB;AACAtB,IAAAA,cAAc,CAAE2B,cAAD,IAAoB,CAAC,GAAGA,cAAJ,EAAoB9B,SAAS,CAACyB,KAAD,CAA7B,CAArB,CAAd;AACD,GAHD;;AAKA,QAAMM,WAAW,GAAG,MAAM;AACxB,WAAOzB,UAAU,CAACc,MAAX,KAAsBpB,SAAS,CAACoB,MAAhC,gBACL,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CADK,gBAGL,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOd,UAAU,CAACc,MAAX,GAAoB,CAA3B,CADT,CAHF;AAOD,GARD;;AAUA,QAAMY,cAAc,GAAG,MAAM;AAC3B,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAiBxB,QAAjB,CADF,CADF;AAKD,GAND;;AAQA,sBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGuB,WAAW,EADd,EAEGC,cAAc,EAFjB,eAGE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAUV,WAAW,EAArB,CAHF,CADF;AAOD,CAhFD;;AAkFA,eAAerB,UAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Container, Content, Score, Image, Title } from \"./MemoryGame.style\";\n\nimport blank from \"../../assets/images/blank.png\";\nimport white from \"../../assets/images/white.png\";\nimport { cardArray } from \"../../helpers/MemoryGame/Utils\";\n\nconst MemoryGame = () => {\n  const [cardsChosen, setCardsChosen] = useState([]);\n  const [cardsChosenId, setCardsChosenId] = useState([]);\n  const [cardsWonId, setCardsWonId] = useState([]);\n  const [attempts, setAttempts] = useState(0);\n\n  useEffect(() => {\n    const checkForMatch = () => {\n      const [cardA, cardB] = cardsChosen;\n      const [idA, idB] = cardsChosenId;\n\n      if (idA === idB) {\n        console.log(\"You have clicked the same image!\");\n        setAttempts((oldAttempts) => oldAttempts + 1);\n      } else if (cardA.name === cardB.name) {\n        console.log(\"You found a match\");\n        setCardsWonId((oldCardsWonId) => [...oldCardsWonId, ...cardsChosenId]);\n      } else {\n        console.log(\"Sorry, try again\");\n        setAttempts((oldAttempts) => oldAttempts + 1);\n      }\n      setCardsChosen([]);\n      setCardsChosenId([]);\n    };\n\n    if (cardsChosen.length === 2) {\n      setTimeout(checkForMatch, 500);\n    }\n\n    return () => {};\n  }, [cardsChosen, cardsChosenId]);\n\n  const renderBoard = () => {\n    return cardArray.map((data, index) => {\n      return (\n        <Image\n          key={index}\n          src={\n            cardsChosenId.includes(index)\n              ? data.img\n              : cardsWonId.includes(index)\n              ? white\n              : blank\n          }\n          onClick={cardsWonId.includes(index) ? null : () => flipCard(index)}\n        />\n      );\n    });\n  };\n\n  const flipCard = (index) => {\n    setCardsChosenId((oldChosenId) => [...oldChosenId, index]);\n    setCardsChosen((oldCardsChosen) => [...oldCardsChosen, cardArray[index]]);\n  };\n\n  const renderScore = () => {\n    return cardsWonId.length === cardArray.length ? (\n      <Score>Congratulations! You found them all!</Score>\n    ) : (\n      <Score>\n        Score: <span>{cardsWonId.length / 2}</span>\n      </Score>\n    );\n  };\n\n  const renderAttempts = () => {\n    return (\n      <h4>\n        <span>Attempts: {attempts}</span>\n      </h4>\n    );\n  };\n\n  return (\n    <Container>\n      {renderScore()}\n      {renderAttempts()}\n      <Content>{renderBoard()}</Content>\n    </Container>\n  );\n};\n\nexport default MemoryGame;\n"]},"metadata":{},"sourceType":"module"}