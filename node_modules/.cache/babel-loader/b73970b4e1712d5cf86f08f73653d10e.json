{"ast":null,"code":"var _jsxFileName = \"/home/howl/\\xC1rea de Trabalho/my-projects/games/src/pages/MemoryGame/MemoryGame.page.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { Container, Content, Score, Image } from \"./MemoryGame.style\";\nimport fries from \"../../assets/images/fries.png\";\nimport cheeseburger from \"../../assets/images/cheeseburger.png\";\nimport icecream from \"../../assets/images/ice-cream.png\";\nimport pizza from \"../../assets/images/pizza.png\";\nimport milkshake from \"../../assets/images/milkshake.png\";\nimport hotdog from \"../../assets/images/hotdog.png\";\nimport blank from \"../../assets/images/blank.png\";\nimport white from \"../../assets/images/white.png\";\n\nconst MemoryGame = () => {\n  const cardArray = [{\n    name: \"fries\",\n    img: fries\n  }, {\n    name: \"cheeseburger\",\n    img: cheeseburger\n  }, {\n    name: \"ice-cream\",\n    img: icecream\n  }, {\n    name: \"pizza\",\n    img: pizza\n  }, {\n    name: \"milkshake\",\n    img: milkshake\n  }, {\n    name: \"hotdog\",\n    img: hotdog\n  }, {\n    name: \"fries\",\n    img: fries\n  }, {\n    name: \"cheeseburger\",\n    img: cheeseburger\n  }, {\n    name: \"ice-cream\",\n    img: icecream\n  }, {\n    name: \"pizza\",\n    img: pizza\n  }, {\n    name: \"milkshake\",\n    img: milkshake\n  }, {\n    name: \"hotdog\",\n    img: hotdog\n  }];\n  const [cardsChosen, setCardsChosen] = useState([]);\n  const [cardsChosenId, setCardsChosenId] = useState([]);\n\n  function checkForMatch() {\n    const [a, b] = cardsChosen;\n  }\n\n  useEffect(() => {\n    if (cardsChosen.length === 2) {\n      checkForMatch();\n    }\n\n    return () => {};\n  }, [cardsChosen, checkForMatch]);\n\n  const renderBoard = () => {\n    return cardArray.map((data, index) => {\n      return /*#__PURE__*/React.createElement(Image, {\n        key: index,\n        src: cardsChosenId.includes(index) ? data.img : blank,\n        onClick: () => flipCard(index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 9\n        }\n      });\n    });\n  };\n\n  const flipCard = index => {\n    console.log(index);\n    setCardsChosenId(oldChosenId => [...oldChosenId, index]);\n    setCardsChosen(oldCardsChosen => [...oldCardsChosen, cardArray[index]]);\n    console.log({\n      cardsChosen,\n      cardsChosenId\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Score, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, \"Score: \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 16\n    }\n  }, \"1\")), /*#__PURE__*/React.createElement(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, renderBoard()));\n};\n\nexport default MemoryGame;","map":{"version":3,"sources":["/home/howl/Área de Trabalho/my-projects/games/src/pages/MemoryGame/MemoryGame.page.jsx"],"names":["React","useState","useEffect","Container","Content","Score","Image","fries","cheeseburger","icecream","pizza","milkshake","hotdog","blank","white","MemoryGame","cardArray","name","img","cardsChosen","setCardsChosen","cardsChosenId","setCardsChosenId","checkForMatch","a","b","length","renderBoard","map","data","index","includes","flipCard","console","log","oldChosenId","oldCardsChosen"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport { Container, Content, Score, Image } from \"./MemoryGame.style\";\n\nimport fries from \"../../assets/images/fries.png\";\nimport cheeseburger from \"../../assets/images/cheeseburger.png\";\nimport icecream from \"../../assets/images/ice-cream.png\";\nimport pizza from \"../../assets/images/pizza.png\";\nimport milkshake from \"../../assets/images/milkshake.png\";\nimport hotdog from \"../../assets/images/hotdog.png\";\nimport blank from \"../../assets/images/blank.png\";\nimport white from \"../../assets/images/white.png\";\n\nconst MemoryGame = () => {\n  const cardArray = [\n    {\n      name: \"fries\",\n      img: fries,\n    },\n    {\n      name: \"cheeseburger\",\n      img: cheeseburger,\n    },\n    {\n      name: \"ice-cream\",\n      img: icecream,\n    },\n    {\n      name: \"pizza\",\n      img: pizza,\n    },\n    {\n      name: \"milkshake\",\n      img: milkshake,\n    },\n    {\n      name: \"hotdog\",\n      img: hotdog,\n    },\n    {\n      name: \"fries\",\n      img: fries,\n    },\n    {\n      name: \"cheeseburger\",\n      img: cheeseburger,\n    },\n    {\n      name: \"ice-cream\",\n      img: icecream,\n    },\n    {\n      name: \"pizza\",\n      img: pizza,\n    },\n    {\n      name: \"milkshake\",\n      img: milkshake,\n    },\n    {\n      name: \"hotdog\",\n      img: hotdog,\n    },\n  ];\n\n  const [cardsChosen, setCardsChosen] = useState([]);\n  const [cardsChosenId, setCardsChosenId] = useState([]);\n  function checkForMatch() {\n    const [a, b] = cardsChosen;\n  }\n  useEffect(() => {\n    if (cardsChosen.length === 2) {\n      checkForMatch();\n    }\n\n    return () => {};\n  }, [cardsChosen, checkForMatch]);\n\n  const renderBoard = () => {\n    return cardArray.map((data, index) => {\n      return (\n        <Image\n          key={index}\n          src={cardsChosenId.includes(index) ? data.img : blank}\n          onClick={() => flipCard(index)}\n        />\n      );\n    });\n  };\n\n  const flipCard = (index) => {\n    console.log(index);\n    setCardsChosenId((oldChosenId) => [...oldChosenId, index]);\n    setCardsChosen((oldCardsChosen) => [...oldCardsChosen, cardArray[index]]);\n    console.log({ cardsChosen, cardsChosenId });\n  };\n\n  return (\n    <Container>\n      <Score>\n        Score: <span>1</span>\n      </Score>\n      <Content>{renderBoard()}</Content>\n    </Container>\n  );\n};\n\nexport default MemoryGame;\n"]},"metadata":{},"sourceType":"module"}